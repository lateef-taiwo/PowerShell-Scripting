param (
    [Parameter(Mandatory=$true)] [string] $TenantId,
    [Parameter(Mandatory=$true)] [string] $ClientId,
    [Parameter(Mandatory=$true)] [string] $ClientSecret,
    [Parameter(Mandatory=$true)] [string] $AppId,
    [string] $OldSecretId  # Optional: Old Secret Key ID to remove
)

# Function to authenticate and get an access token
function Get-AccessToken {
    param (
        [string] $TenantId,
        [string] $ClientId,
        [string] $ClientSecret
    )

    $authBody = @{
        grant_type    = "client_credentials"
        client_id     = $ClientId
        client_secret = $ClientSecret
        scope         = "https://graph.microsoft.com/.default"
    }

    $response = Invoke-RestMethod -Uri "https://login.microsoftonline.com/$TenantId/oauth2/v2.0/token" `
        -Method Post -ContentType "application/x-www-form-urlencoded" -Body $authBody

    return $response.access_token
}

# Function to get App Object ID from App ID
function Get-AppObjectId {
    param (
        [string] $AppId,
        [string] $AccessToken
    )

    $uri = "https://graph.microsoft.com/v1.0/applications?`$filter=appId eq '$AppId'"
    $response = Invoke-RestMethod -Uri $uri -Headers @{Authorization = "Bearer $AccessToken"} -Method Get

    if ($response.value.Count -eq 0) {
        Write-Host "‚ùå Error: App Registration with ID $AppId not found" -ForegroundColor Red
        exit
    }

    return $response.value[0].id
}

# Function to create a new client secret
function Create-NewSecret {
    param (
        [string] $AppObjectId,
        [string] $AccessToken
    )

    $startDateTime = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
    $endDateTime = (Get-Date).AddYears(1).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")  # 1-year expiry

    $body = @{
        passwordCredential = @{
            displayName = "RotatedSecret"
            startDateTime = $startDateTime
            endDateTime = $endDateTime
        }
    } | ConvertTo-Json -Depth 3

    $uri = "https://graph.microsoft.com/v1.0/applications/$AppObjectId/addPassword"
    $newSecret = Invoke-RestMethod -Uri $uri -Headers @{Authorization = "Bearer $AccessToken"; "Content-Type" = "application/json"} -Method Post -Body $body

    Write-Host "‚úÖ New Secret Created!" -ForegroundColor Green
    Write-Host "üîë Secret Value (Save this securely!):" $newSecret.secretText
    Write-Host "üîë Secret ID: " $newSecret.keyId

    return $newSecret.keyId
}

# Function to remove an old client secret
function Remove-OldSecret {
    param (
        [string] $AppObjectId,
        [string] $OldSecretId,
        [string] $AccessToken
    )

    if ([string]::IsNullOrEmpty($OldSecretId)) {
        Write-Host "‚ö†Ô∏è No old secret specified for removal. Skipping..." -ForegroundColor Yellow
        return
    }

    $uri = "https://graph.microsoft.com/v1.0/applications/$AppObjectId/removePassword"
    $body = @{ keyId = $OldSecretId } | ConvertTo-Json

    Invoke-RestMethod -Uri $uri -Headers @{Authorization = "Bearer $AccessToken"; "Content-Type" = "application/json"} -Method Post -Body $body
    Write-Host "üóëÔ∏è Old Secret Removed!" -ForegroundColor Yellow
}

# Main Execution Flow
$accessToken = Get-AccessToken -TenantId $TenantId -ClientId $ClientId -ClientSecret $ClientSecret
$appObjectId = Get-AppObjectId -AppId $AppId -AccessToken $accessToken
$newSecretId = Create-NewSecret -AppObjectId $appObjectId -AccessToken $accessToken
Remove-OldSecret -AppObjectId $appObjectId -OldSecretId $OldSecretId -AccessToken $accessToken

Write-Host "üîÑ Secret rotation complete." -ForegroundColor Cyan
